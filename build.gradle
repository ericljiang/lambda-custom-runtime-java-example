plugins {
    // Apply the java plugin to add support for Java
    id 'java'

    // Apply the application plugin to add support for building an application
    id 'application'

    id 'com.palantir.graal' version '0.6.0'

    id 'com.adarshr.test-logger' version '2.0.0'

    id 'jacoco'

    id 'checkstyle'

    id 'maven'
}

repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
    maven { url "https://jitpack.io" }
}

dependencies {
    annotationProcessor 'org.immutables:value:2.8.2'
    annotationProcessor 'org.projectlombok:lombok:1.18.10'

    compileOnly 'org.immutables:gson:2.8.2'
    compileOnly 'org.immutables:value-annotations:2.8.2'
    compileOnly 'org.projectlombok:lombok:1.18.10'

    // This dependency is found on compile classpath of this component and consumers.
    implementation 'com.amazonaws:aws-lambda-java-core:1.2.0'
    implementation 'org.slf4j:slf4j-api:1.7.28'
    implementation 'org.slf4j:slf4j-simple:1.7.28'
    implementation 'com.github.ericljiang:aws-lambda-graalvm:0.1.0'

    // Use JUnit test framework
    testImplementation 'junit:junit:4.12'
    testImplementation 'org.easymock:easymock:4.0.2'
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

// Define the main class for the application
mainClassName = 'lambda.custom.runtime.java.example.Main'

// Allows VS Code to put generated source files on the classpath
sourceSets.main.java.srcDirs += new File(buildDir, '/generated/sources/annotationProcessor/java/main')

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.7
            }
        }
    }
}

checkstyle {
    toolVersion '8.26'
}

// Workaround to exclude generated sources
checkstyleMain {
    source = fileTree('src/main/java')
}

graal {
    mainClass project.mainClassName
    outputName "$buildDir/$libsDirName/runtime"
    option '--no-fallback'
    option '--enable-http'
    option '-Djava.net.preferIPv4Stack=true'
    option '-H:+ReportExceptionStackTraces'
}

// Archive the generated binary and the bootstrap file to invoke it
task packageLambda(type: Zip) {
    from nativeImage
    from processResources {
        include 'bootstrap'
    }
}

task buildDocker(type: Exec) {
    dependsOn classes
    commandLine './buildDocker.sh'
}

task printTestReportLocation {
    doLast {
        println "Unit test report: build/reports/tests/test/index.html"
        println "Coverage report: build/reports/jacoco/test/html/index.html"
    }
}

test.finalizedBy jacocoTestReport
jacocoTestReport.finalizedBy jacocoTestCoverageVerification
jacocoTestReport.finalizedBy printTestReportLocation
